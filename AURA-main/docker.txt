AURA Compression Docker Guide

Copyright (c) 2025 Todd James Hendricks
Licensed under Apache License 2.0
Patent Pending - Application No. 19/366,538

--------------------------------------------------------------------------------

DOCKER IMAGES

Production image:
  - Multi-stage build for minimal size
  - Includes Python, Node.js, and Rust binaries
  - Non-root user for security
  - Health checks enabled
  - Size: approximately 200MB

Development image:
  - All build tools included
  - Hot reload support
  - Debugging tools (debugpy)
  - Size: approximately 800MB

--------------------------------------------------------------------------------

QUICK START

Pull and run:

  docker pull aura/compression:latest

  docker run -d \
    --name aura-server \
    -p 8765:8765 \
    aura/compression:latest

Build from source:

  git clone https://github.com/yourusername/aura-compression.git
  cd aura-compression
  docker build -t aura/compression:latest .

Run built image:

  docker run -d \
    --name aura-server \
    -p 8765:8765 \
    -v $(pwd)/data:/data \
    -v $(pwd)/logs:/logs \
    aura/compression:latest

--------------------------------------------------------------------------------

DOCKER COMPOSE

Start services:

  docker-compose up -d

Stop services:

  docker-compose down

View logs:

  docker-compose logs -f aura-server

Restart service:

  docker-compose restart aura-server

Check status:

  docker-compose ps

--------------------------------------------------------------------------------

DOCKER COMPOSE PROFILES

Default (server only):

  docker-compose up -d

With Redis cache:

  docker-compose --profile cache up -d

With monitoring (Prometheus + Grafana):

  docker-compose --profile monitoring up -d

With CLI tools:

  docker-compose --profile cli run --rm aura-cli

All profiles:

  docker-compose --profile cache --profile monitoring up -d

--------------------------------------------------------------------------------

ENVIRONMENT VARIABLES

AURA_ENABLE_AUDIT:
  - Enable audit logging
  - Values: true, false
  - Default: true
  - Example: -e AURA_ENABLE_AUDIT=true

AURA_LOG_LEVEL:
  - Logging level
  - Values: debug, info, warning, error
  - Default: info
  - Example: -e AURA_LOG_LEVEL=debug

AURA_TEMPLATE_STORE:
  - Path to template store file
  - Default: /data/templates.json
  - Example: -e AURA_TEMPLATE_STORE=/custom/path/templates.json

AURA_SESSION_ID:
  - Session identifier for audit logs
  - Default: default
  - Example: -e AURA_SESSION_ID=session_123

AURA_USER_ID:
  - User identifier for audit logs
  - Default: default
  - Example: -e AURA_USER_ID=user_456

Example with all variables:

  docker run -d \
    --name aura-server \
    -p 8765:8765 \
    -v $(pwd)/data:/data \
    -v $(pwd)/logs:/logs \
    -e AURA_ENABLE_AUDIT=true \
    -e AURA_LOG_LEVEL=info \
    -e AURA_TEMPLATE_STORE=/data/templates.json \
    -e AURA_SESSION_ID=session_123 \
    -e AURA_USER_ID=user_456 \
    aura/compression:latest

--------------------------------------------------------------------------------

VOLUMES

Data volume (/data):
  - Template store
  - Persistent configuration
  - Recommendation: Use named volume or bind mount

Logs volume (/logs):
  - Application logs
  - Audit logs
  - Recommendation: Use bind mount for easy access

Config volume (/config):
  - Read-only configuration files
  - Recommendation: Use bind mount

Example volume setup:

  docker run -d \
    --name aura-server \
    -p 8765:8765 \
    -v aura-data:/data \
    -v $(pwd)/logs:/logs \
    -v $(pwd)/config:/config:ro \
    aura/compression:latest

Named volumes:

  docker volume create aura-data
  docker volume create aura-logs

  docker run -d \
    --name aura-server \
    -p 8765:8765 \
    -v aura-data:/data \
    -v aura-logs:/logs \
    aura/compression:latest

--------------------------------------------------------------------------------

NETWORKING

Default bridge network:

  docker run -d \
    --name aura-server \
    -p 8765:8765 \
    aura/compression:latest

Custom network:

  docker network create aura-network

  docker run -d \
    --name aura-server \
    --network aura-network \
    -p 8765:8765 \
    aura/compression:latest

Multiple containers:

  docker network create aura-network

  docker run -d \
    --name aura-server-1 \
    --network aura-network \
    -p 8765:8765 \
    aura/compression:latest

  docker run -d \
    --name aura-server-2 \
    --network aura-network \
    -p 8766:8765 \
    aura/compression:latest

--------------------------------------------------------------------------------

HEALTH CHECKS

Built-in health check:

  docker ps

  CONTAINER ID   STATUS
  abc123def456   Up 5 minutes (healthy)

Manual health check:

  docker exec aura-server curl -f http://localhost:8765/health

Health check configuration:

  docker run -d \
    --name aura-server \
    -p 8765:8765 \
    --health-cmd "curl -f http://localhost:8765/health || exit 1" \
    --health-interval 30s \
    --health-timeout 3s \
    --health-retries 3 \
    aura/compression:latest

--------------------------------------------------------------------------------

DEVELOPMENT MODE

Start development container:

  docker-compose -f docker-compose.dev.yml up

Rebuild on code changes:

  docker-compose -f docker-compose.dev.yml up --build

Run tests:

  docker-compose -f docker-compose.dev.yml run --rm aura-test

Interactive shell:

  docker-compose -f docker-compose.dev.yml run --rm aura-dev /bin/bash

Debugging with debugpy:

  docker-compose -f docker-compose.dev.yml up

  Connect debugger to localhost:5678

--------------------------------------------------------------------------------

CLI TOOLS

Run compression:

  docker run --rm -v $(pwd):/work aura/compression:latest \
    aura-compress /work/input.txt -o /work/compressed.aura

Run decompression:

  docker run --rm -v $(pwd):/work aura/compression:latest \
    aura-decompress /work/compressed.aura -o /work/output.txt

Interactive shell:

  docker run -it --rm aura/compression:latest /bin/bash

Run Python script:

  docker run --rm -v $(pwd):/work aura/compression:latest \
    python /work/my_script.py

Run Node.js script:

  docker run --rm -v $(pwd):/work aura/compression:latest \
    node /work/my_script.js

--------------------------------------------------------------------------------

PRODUCTION DEPLOYMENT

Single server:

  docker run -d \
    --name aura-server \
    --restart unless-stopped \
    -p 8765:8765 \
    -v aura-data:/data \
    -v aura-logs:/logs \
    -e AURA_ENABLE_AUDIT=true \
    -e AURA_LOG_LEVEL=info \
    --health-cmd "curl -f http://localhost:8765/health || exit 1" \
    --health-interval 30s \
    --health-timeout 3s \
    --health-retries 3 \
    aura/compression:latest

Load balanced setup:

  docker network create aura-network

  for i in {1..3}; do
    docker run -d \
      --name aura-server-$i \
      --network aura-network \
      --restart unless-stopped \
      -e AURA_ENABLE_AUDIT=true \
      aura/compression:latest
  done

  docker run -d \
    --name nginx-lb \
    --network aura-network \
    -p 8765:8765 \
    -v $(pwd)/nginx.conf:/etc/nginx/nginx.conf:ro \
    nginx:alpine

With monitoring:

  docker-compose --profile monitoring up -d

  Access Grafana: http://localhost:3000
  Access Prometheus: http://localhost:9090

--------------------------------------------------------------------------------

KUBERNETES DEPLOYMENT

Deployment manifest:

  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: aura-compression
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: aura-compression
    template:
      metadata:
        labels:
          app: aura-compression
      spec:
        containers:
        - name: aura-server
          image: aura/compression:latest
          ports:
          - containerPort: 8765
          env:
          - name: AURA_ENABLE_AUDIT
            value: "true"
          - name: AURA_LOG_LEVEL
            value: "info"
          volumeMounts:
          - name: data
            mountPath: /data
          - name: logs
            mountPath: /logs
          livenessProbe:
            httpGet:
              path: /health
              port: 8765
            initialDelaySeconds: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: 8765
            initialDelaySeconds: 5
            periodSeconds: 10
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: aura-data
        - name: logs
          persistentVolumeClaim:
            claimName: aura-logs

Service manifest:

  apiVersion: v1
  kind: Service
  metadata:
    name: aura-compression
  spec:
    selector:
      app: aura-compression
    ports:
    - protocol: TCP
      port: 8765
      targetPort: 8765
    type: LoadBalancer

Apply manifests:

  kubectl apply -f deployment.yaml
  kubectl apply -f service.yaml

Check status:

  kubectl get pods
  kubectl get services
  kubectl logs -f aura-compression-xxxxx

--------------------------------------------------------------------------------

TROUBLESHOOTING

Container won't start:

  Check logs:
    docker logs aura-server

  Check configuration:
    docker inspect aura-server

  Verify image:
    docker run --rm aura/compression:latest aura-compress --help

Port already in use:

  Find process using port:
    lsof -i :8765

  Use different port:
    docker run -d -p 8766:8765 aura/compression:latest

Permission denied:

  Add user to docker group:
    sudo usermod -aG docker $USER
    newgrp docker

  Or use sudo:
    sudo docker run -d aura/compression:latest

Volume mount issues:

  Check permissions:
    ls -la $(pwd)/data

  Fix permissions:
    chmod 755 $(pwd)/data
    chmod 755 $(pwd)/logs

  Use absolute paths:
    docker run -v /absolute/path/data:/data aura/compression:latest

Out of memory:

  Increase Docker memory limit:
    Docker Desktop > Settings > Resources > Memory > 4GB

  Or limit container memory:
    docker run -d --memory 2g aura/compression:latest

--------------------------------------------------------------------------------

MAINTENANCE

Update image:

  docker pull aura/compression:latest
  docker stop aura-server
  docker rm aura-server
  docker run -d --name aura-server -p 8765:8765 aura/compression:latest

Backup data:

  docker run --rm \
    -v aura-data:/data \
    -v $(pwd)/backup:/backup \
    alpine tar czf /backup/aura-data-backup.tar.gz /data

Restore data:

  docker run --rm \
    -v aura-data:/data \
    -v $(pwd)/backup:/backup \
    alpine tar xzf /backup/aura-data-backup.tar.gz -C /

Clean up:

  Remove stopped containers:
    docker container prune

  Remove unused images:
    docker image prune

  Remove unused volumes:
    docker volume prune

  Remove everything:
    docker system prune -a --volumes

--------------------------------------------------------------------------------

NEXT STEPS

For more information, see:
  - install.txt for installation guide
  - usage.txt for usage examples
  - performance.txt for performance tuning
  - kubernetes.txt for Kubernetes deployment guide
