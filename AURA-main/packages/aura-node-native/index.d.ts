/* auto-generated by NAPI-RS */
/* eslint-disable */

export const enum CompressionMethod {
  BinarySemantic = 1,
  Brotli = 2,
  Uncompressed = 255
}

export interface Template {
  id: number
  pattern: string
  description: string
  slots: number
}

export interface CompressionResult {
  data: Buffer
  method: CompressionMethod
  originalSize: number
  compressedSize: number
  ratio: number
  templateId?: number
}

export interface DecompressionResult {
  plaintext: string
  method: CompressionMethod
  originalSize: number
  compressedSize: number
  ratio: number
  templateId?: number
}

/**
 * AURA Compressor - Native high-performance implementation
 *
 * Provides 2-10x faster compression/decompression compared to pure JavaScript.
 */
export class AuraCompressor {
  /**
   * Create a new compressor with default templates
   */
  constructor()

  /**
   * Create compressor with custom configuration
   * @param binaryThreshold - Ratio threshold for using binary semantic (default: 1.1)
   * @param minSize - Minimum size to compress (default: 50 bytes)
   */
  static withConfig(binaryThreshold: number, minSize: number): AuraCompressor

  /**
   * Add a custom template
   */
  addTemplate(template: Template): void

  /**
   * Get template by ID
   */
  getTemplate(id: number): Template | null

  /**
   * Compress text using best method
   */
  compress(text: string): CompressionResult

  /**
   * Compress with specific template
   */
  compressWithTemplate(templateId: number, slots: Array<string>): CompressionResult

  /**
   * Decompress data
   */
  decompress(data: Buffer): DecompressionResult
}
