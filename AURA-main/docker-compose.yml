version: '3.8'

services:
  # AURA Compression WebSocket Server
  aura-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aura-compression-server
    restart: unless-stopped
    ports:
      - "8765:8765"
    volumes:
      - ./data:/data
      - ./logs:/logs
      - ./config:/config:ro
    environment:
      - AURA_ENABLE_AUDIT=true
      - AURA_LOG_LEVEL=info
      - AURA_TEMPLATE_STORE=/data/templates.json
      - AURA_SESSION_ID=${SESSION_ID:-default}
      - AURA_USER_ID=${USER_ID:-default}
    networks:
      - aura-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    labels:
      - "com.aura.service=compression-server"
      - "com.aura.version=1.0.0"

  # AURA Compression CLI (for testing)
  aura-cli:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aura-compression-cli
    entrypoint: ["/bin/bash"]
    stdin_open: true
    tty: true
    volumes:
      - ./data:/data
      - ./tests:/tests:ro
    environment:
      - AURA_TEMPLATE_STORE=/data/templates.json
    networks:
      - aura-network
    profiles:
      - cli

  # Redis (optional - for distributed template caching)
  redis:
    image: redis:7-alpine
    container_name: aura-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - aura-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    profiles:
      - cache

  # Prometheus (optional - for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: aura-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - aura-network
    profiles:
      - monitoring

  # Grafana (optional - for dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: aura-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - aura-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  aura-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
